<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Page</title>
  <link rel="stylesheet" href="/css/addProduct.css">
  <link rel="stylesheet" href="/css/nav.css">
  <style>
    *{
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
  </style>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/simplePagination.js/1.6/jquery.simplePagination.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/simplePagination.js/1.6/simplePagination.min.css">
</head>
<body>
    <%- include('./partials/nav', {name:name}) %>
    <div class="conatiner-model">
      <div class="container">
      <h1>Product Dashboard</h1>
      
      <div  class="products-container">
        <!-- Products will be displayed here -->
      </div>
       <div style="display: flex; justify-content: center; align-items: center; height: 40px; width: 100vw;">
        <label for="" style="margin-right: 10px;">Select Items</label>
        <select name="no_of_products" id="no_of_products">
          <option value="5">5</option>
          <option value="10">10</option>
          <option value="15">15</option>
        </select>
        <div id="pagination" style="margin-left: 40px;"></div>
        <script>
          function createPagination(items, itemperPage) {
            console.log(items, itemperPage)
            {
              $('#pagination').pagination({
                items: items,
                itemsOnPage: itemperPage,
                onPageClick: function (pageNo) {
                  fetchAndDisplayProducts(pageNo);
                }
              });
            }
          }
        </script>
        <!-- <button  class="load-more-button" id="add_bulk" style="margin-left: 40px;">Add Bulk Data</button> -->
      </div>
      <button onclick="loadMoreProducts()" id="load-more-button">Load more products</button>
    </div>
  <script>  
    const productsContainer = document.querySelector('.products-container');
    const loadMoreButton = document.getElementById('load-more-button');
    const userID = document.getElementById("user-name")?.getAttribute('class') || 'hello';
    const noOfProducts = document.getElementById('no_of_products');

    console.log(userID);
    let startIndex = 0;
    let allProducts;
    let allCartProducts;
    noOfProducts.addEventListener('change', () => {

          createPagination(30, noOfProducts.value);
          fetchAndDisplayProducts(1);
        });
        fetch('/product/products/count').then(function(res){
          return res.json()
        }).then((totalProductCount)=>{
          console.log('hello'+totalProductCount);
          createPagination(totalProductCount, document.getElementById('no_of_products').value)

        })
    // Function to fetch and display products 
    async function fetchAndDisplayProducts(pageNo) {
      productsContainer.innerHTML = '';
                const noOfProducts = document.getElementById('no_of_products').value;

      const res= await fetch(`/product/products?start=${pageNo}&no_of_products=${noOfProducts}`)
       
      const data=await res.json();
       if (data.length < 1) {
            document.getElementById('load-more-button').style.display = 'none';
          }
          if (!allProducts) {
        allProducts = data;
      } else {
        allProducts = allProducts.concat(data);
      }
          data.forEach(product => {
          appendSingleProduct(product);
          });
          startIndex += 5;
          // Add event listeners to all "Update" buttons
    // document.querySelectorAll('.update-details-button').forEach(button => button.addEventListener('click', handleUpdate));;
    document.querySelectorAll('.delete-button').forEach(button => button.addEventListener('click', handleDelete));;
        }

function appendSingleProduct(product){
    // console.log(allProducts);
            const productDiv = document.createElement('div');
            // product.setAttribute('class','product')
            productDiv.setAttribute('id',`${product.id}`)
            productDiv.innerHTML =`
    <label for="name-${product.id}">Name:</label>
    <input type="text" id="name-${product.id}" value="${product.name}">
    
    <label for="price-${product.id}">Price:$</label>
    <input type="text" id="price-${product.id}" value="${product.price}">
    
    <label for="quantity-${product.id}">Quantity:</label>
    <input type="text" id="quantity-${product.id}" value="${product.quantity}">

    <img src="${product.image}" width='150px' height='150px' style="margin: 10px;" ></img>



    
    <label for="description-${product.id}">Description:</label>
    <textarea style="resize: none;"id="description-${product.id}"  cols="30" rows="10" value="">${product.description}</textarea>
    <div class="item-btn">
        <button class="update-details-button" id="update-${product.id}" onClick='handleUpdate("${product.id}")'>Update</button>
        <button class="delete-button" id="delete-${product.id}">Delete</button>
    </div>
`;
//             productDiv.innerHTML =`
//     <label for="name-${product.id}">Name:</label>
//     <p type="text" id="name-${product.id}" value="></p>
    
//     <label for="price-${product.id}">Price:$</label>
//     <p type="text" id="price-${product.id}" value="${product.price}">
    
//     <label for="quantity-${product.id}">Quantity:</label>
//     <p type="text" id="quantity-${product.id}" value="${product.quantity}">

//     <img src="${product.image}" width='150px' height='150px' style="margin: 10px;" ></img>



    
//     <label for="description-${product.id}">Description:</label>
//     <p style="resize: none;"id="description-${product.id}"  cols="30" rows="10" value="">${product.description}</p>
// `;

// // debugger;
  productsContainer.appendChild(productDiv);
}
// Function to handle the update process
async function handleUpdate(id) {
    try {
        // const id = event.currentTarget.id.split('-')[1];
        console.log(`update clicked for ID: ${id}`);

        // Get values from input fields
        const name = getValue(`name-${id}`);
        const price = getValue(`price-${id}`);
        const quantity = getValue(`quantity-${id}`);
        const description = getValue(`description-${id}`);

        // Send update request to the server
        const response = await updateProduct(id, { name, price, quantity, description });

        // Handle the response (e.g., show a success message)
        const data = await response.json();
        console.log(data);
    } catch (error) {
        console.error('An error occurred:', error);
    }
}
// Function to handle the delete process
async function handleDelete(event) {
    try {
        const id = event.currentTarget.id.split('-')[1];
        console.log(`Delete clicked for ID: ${id}`);

        // Send delete request to the server
        const response = await deleteProduct(id);

        // Handle the response (e.g., show a success message)
        const data = await response.json();
        if(data)
        document.getElementById(id).innerHTML="";

    } catch (error) {
        console.error('An error occurred:', error);
    }
}
// Function to retrieve input field values by ID
function getValue(id) {
    return document.getElementById(id).value.trim();
}


// Function to update product details
async function updateProduct(id, data) {
    const url = `/product/${id}`;
    const options = {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    };
    return fetch(url, options);
}
async function deleteProduct(id) {
    const url = `/product/${id}`;
    const options = {
        method: 'DELETE',
         headers: {
            'Content-Type': 'application/json',
        }
    };
    return fetch(url, options);
}

    
    

    // Function to load more products
    function loadMoreProducts() {
      fetchAndDisplayProducts();
    }


    // Initial load of products
    fetchAndDisplayProducts();

 

  </script>
</body>
</html>
